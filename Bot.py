import asyncio  # –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å async def –∏ await, –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –∫–æ–¥ –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–ª—Å—è –ø–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —É—Å–ª–æ–≤–∏–µ await, —á—Ç–æ–±—ã –±–æ—Ç –±—ã–ª –º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω—ã–º
import sys  # –î–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç logging –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
import logging  # –î–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Ä–∞–±–æ—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
import sqlite3  # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (—Ç–∞–±–ª–∏—Ü–∞) –≤ –∫–æ—Ç–æ—Ä–æ–π –º—ã —Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ —Ç.–¥.
import os
import datetime
import locale

from aiogram import Bot, Dispatcher, html, types  # –ë–æ—Ç, HTML - —Ä–∞–∑–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –≤ –¢–ì, Dispatcher - –¥–∏—Ä–∏–∂—ë—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
from os import getenv  # –ß—Ç–æ–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TOKEN, –∑–∞–¥–∞—ë—Ç—Å—è —á–µ—Ä–µ–∑ Powershell
from aiogram.filters import CommandStart, Command  # –ü–æ —Å—É—Ç–∏ –≥–æ—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞
from aiogram.types import Message  # –ü–æ —Å—É—Ç–∏ –≥–æ—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (ID, First_name, text –∏ —Ç.–¥.)
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª–∏ –¥–ª—è –¥–∞—Ç
try:
    locale.setlocale(locale.LC_TIME, "ru_RU.UTF-8")  # Linux / Mac
except locale.Error:
    locale.setlocale(locale.LC_TIME, "Russian_Russia")  # Windows


class DzStates(StatesGroup):
    choosing_subject = State()
    writing_homework = State()


admin_1 = 1920672301  # –ê–¥–º–∏–Ω
admin_2 = 5251769398  # –ê–¥–º–∏–Ω
ADMINS = [admin_1, admin_2]

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
db_path = os.path.join(BASE_DIR, "UserInfo.db")
conn = sqlite3.connect(db_path)

TOKEN = getenv("BOT_TOKEN")  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ Powershell
if not TOKEN:
    print("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

bot = Bot(token=str(TOKEN))
dp = Dispatcher()  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ "–¥–∏—Ä–∏–∂—ë—Ä–∞"
cursor = conn.cursor()  # –ù—É–∂–Ω–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Ç–∞–±–ª–∏—Ü–µ

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute("""
    CREATE TABLE IF NOT EXISTS UserInfo (
        id INTEGER PRIMARY KEY,
        user_id INTEGER UNIQUE,
        user_name TEXT,
        user_option INT
    )
""")

cursor.execute("""
    CREATE TABLE IF NOT EXISTS Dz_Table (
        id INTEGER PRIMARY KEY,
        –ê–ª–≥–µ–±—Ä–∞ TEXT,
        "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫" TEXT,
        –ì–µ–æ–º–µ—Ç—Ä–∏—è TEXT,
        –ò—Å—Ç–æ—Ä–∏—è TEXT,
        "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫" TEXT,
        –§–∏–∑–∏–∫–∞ TEXT,
        "–°–ø–µ—Ü–∫—É—Ä—Å –ø–æ —Ñ–∏–∑–∏–∫–µ" TEXT,
        –ë–∏–æ–ª–æ–≥–∏—è TEXT,
        –•–∏–º–∏—è TEXT,
        –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ TEXT,
        –û–ë–ó–† TEXT,
        –§–∏–∑–∫—É–ª—å–∫—É—Ç–∞ TEXT,
        "–†–∞–∑–≥–æ–≤–æ—Ä –æ –≤–∞–∂–Ω–æ–º" TEXT,
        –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ TEXT,
        –ì–µ–æ–≥—Ä–∞—Ñ–∏—è TEXT,
        –û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ TEXT,
        –í–∏–° TEXT
    )
""")
conn.commit()

subjects = [
    "–ê–ª–≥–µ–±—Ä–∞", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–ò—Å—Ç–æ—Ä–∏—è",
    "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–§–∏–∑–∏–∫–∞", "–°–ø–µ—Ü–∫—É—Ä—Å –ø–æ —Ñ–∏–∑–∏–∫–µ",
    "–ë–∏–æ–ª–æ–≥–∏—è", "–•–∏–º–∏—è", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–û–ë–ó–†",
    "–§–∏–∑–∫—É–ª—å–∫—É—Ç–∞", "–†–∞–∑–≥–æ–≤–æ—Ä –æ –≤–∞–∂–Ω–æ–º", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
    "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–í–∏–°"
]

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
cursor.execute("PRAGMA table_info(Dz_Table)")
existing_columns = [col[1] for col in cursor.fetchall()]

for subj in subjects:
    col_name = f"{subj}_date"
    if col_name not in existing_columns:
        cursor.execute(f"ALTER TABLE Dz_Table ADD COLUMN '{col_name}' TEXT")
conn.commit()


def get_main_menu(user_id: int) -> ReplyKeyboardMarkup:
    buttons = [
        [KeyboardButton(text="üìÖ –î–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")],
        [KeyboardButton(text="üìÖ –î–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")],
        [KeyboardButton(text="üìñ –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç")]
    ]

    if user_id in ADMINS:
        buttons.append([KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –î–ó")])

    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


DZ_VAR1 = [
    ["–†–∞–∑–≥–æ–≤–æ—Ä –æ –≤–∞–∂–Ω–æ–º", "–§–∏–∑–∫—É–ª—å–∫—É—Ç–∞", "–•–∏–º–∏—è", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–§–∏–∑–∏–∫–∞"],
    ["–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ê–ª–≥–µ–±—Ä–∞", "–ê–ª–≥–µ–±—Ä–∞", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–û–ë–ó–†"],
    ["–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ò—Å—Ç–æ—Ä–∏—è", "–ò—Å—Ç–æ—Ä–∏—è", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–§–∏–∑–∫—É–ª—å–∫—É—Ç–∞"],
    ["–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–í–∏–°", "–ë–∏–æ–ª–æ–≥–∏—è", "–ë–ü–õ–ê"],
    ["–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ê–ª–≥–µ–±—Ä–∞", "–ê–ª–≥–µ–±—Ä–∞", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–°–ø–µ—Ü–∫—É—Ä—Å –ø–æ —Ñ–∏–∑–∏–∫–µ"]
]

DZ_VAR2 = [
    ["–†–∞–∑–≥–æ–≤–æ—Ä –æ –≤–∞–∂–Ω–æ–º", "–§–∏–∑–∫—É–ª—å–∫—É—Ç–∞", "–•–∏–º–∏—è", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–§–∏–∑–∏–∫–∞", "–§–∏–∑–∏–∫–∞"],
    ["–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ê–ª–≥–µ–±—Ä–∞", "–ê–ª–≥–µ–±—Ä–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–û–ë–ó–†"],
    ["-", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–ò—Å—Ç–æ—Ä–∏—è", "–ò—Å—Ç–æ—Ä–∏—è", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–§–∏–∑–∫—É–ª—å–∫—É—Ç–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"],
    ["–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–í–∏–°", "–ë–∏–æ–ª–æ–≥–∏—è", "–ë–ü–õ–ê"],
    ["–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ê–ª–≥–µ–±—Ä–∞", "–ê–ª–≥–µ–±—Ä–∞", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–°–ø–µ—Ü–∫—É—Ä—Å –ø–æ —Ñ–∏–∑–∏–∫–µ"]
]

cursor.execute("""
    INSERT OR IGNORE INTO Dz_Table (
        id, –ê–ª–≥–µ–±—Ä–∞, "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", –ì–µ–æ–º–µ—Ç—Ä–∏—è, –ò—Å—Ç–æ—Ä–∏—è, "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫",
        –§–∏–∑–∏–∫–∞, "–°–ø–µ—Ü–∫—É—Ä—Å –ø–æ —Ñ–∏–∑–∏–∫–µ", –ë–∏–æ–ª–æ–≥–∏—è, –•–∏–º–∏—è, –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞, –û–ë–ó–†,
        –§–∏–∑–∫—É–ª—å–∫—É—Ç–∞, "–†–∞–∑–≥–æ–≤–æ—Ä –æ –≤–∞–∂–Ω–æ–º", –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞, –ì–µ–æ–≥—Ä–∞—Ñ–∏—è,
        –û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ, –í–∏–°
    )
    VALUES (
        1, '–ù–∏—á–µ–≥–æ', '–ù–∏—á–µ–≥–æ', '–ù–∏—á–µ–≥–æ', '–ù–∏—á–µ–≥–æ', '–ù–∏—á–µ–≥–æ',
        '–ù–∏—á–µ–≥–æ', '–ù–∏—á–µ–≥–æ', '–ù–∏—á–µ–≥–æ', '–ù–∏—á–µ–≥–æ', '–ù–∏—á–µ–≥–æ', '–ù–∏—á–µ–≥–æ',
        '–ù–∏—á–µ–≥–æ', '–ù–∏—á–µ–≥–æ', '–ù–∏—á–µ–≥–æ', '–ù–∏—á–µ–≥–æ',
        '–ù–∏—á–µ–≥–æ', '–ù–∏—á–µ–≥–æ'
    )
""")
conn.commit()

def get_full_schedule(user_id: int) -> str:
    cursor.execute("SELECT user_option FROM UserInfo WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if not row or not row[0]:
        return "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ 'üîÑ –°–º–µ–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç'"

    user_option = row[0]
    DZ = DZ_VAR1 if user_option == 1 else DZ_VAR2

    cursor.execute("SELECT * FROM Dz_Table WHERE id = 1")
    row = cursor.fetchone()
    if not row:
        return "‚ùå –î–æ–º–∞—à–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    col_names = [desc[0] for desc in cursor.description]
    homework_data = dict(zip(col_names, row))

    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]
    result = ""

    for i, day in enumerate(days):
        subjects = DZ[i]
        result += f"<b><u>{day} ‚Äî –í–∞—Ä–∏–∞–Ω—Ç {user_option}</u></b>\n\n"
        for j, subj in enumerate(subjects, start=1):
            if subj == "-":
                result += f"<b>{j}. ‚ùå –ù–µ—Ç —É—Ä–æ–∫–∞</b>\n"
            else:
                hw = homework_data.get(subj, "–ù–∏—á–µ–≥–æ")
                date = homework_data.get(f"{subj}_date", "")
                result += f"<b>{j}. {html.quote(subj)} ‚Äî {html.quote(hw)}</b>"
                if date:
                    result += f" [{date}]"
                result += "\n"
        result += "\n"

    return result


def get_homework_for_day(user_id: int, day_index: int) -> str:
    cursor.execute("SELECT user_option FROM UserInfo WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if not row or not row[0]:
        return "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ 'üîÑ –°–º–µ–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç'"

    user_option = row[0]
    DZ = DZ_VAR1 if user_option == 1 else DZ_VAR2

    cursor.execute("SELECT * FROM Dz_Table WHERE id = 1")
    row = cursor.fetchone()
    if not row:
        return "‚ùå –î–æ–º–∞—à–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    col_names = [desc[0] for desc in cursor.description]
    homework_data = dict(zip(col_names, row))

    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]
    subjects = DZ[day_index]
    schedule_text = f"<b><u>{days[day_index]} ‚Äî –í–∞—Ä–∏–∞–Ω—Ç {user_option}</u></b>\n\n"

    for i, subj in enumerate(subjects, start=1):
        if subj == "-":
            schedule_text += f"<b>{i}. ‚ùå –ù–µ—Ç —É—Ä–æ–∫–∞</b>\n"
        else:
            hw = homework_data.get(subj, "–ù–∏—á–µ–≥–æ")
            date = homework_data.get(f"{subj}_date", "")
            schedule_text += f"<b>{i}. {html.quote(subj)} ‚Äî {html.quote(hw)}</b>"
            if date:
                schedule_text += f" [{date}]"
            schedule_text += "\n"

    return schedule_text


def get_user_info(user: types.User | None):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π id –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user is None:
        return None, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    return user.id, user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"


@dp.message(CommandStart())
async def command_start_handler(message: Message):
    cursor.execute(
        "INSERT OR IGNORE INTO UserInfo (user_id, user_name) VALUES (?, ?)",
        (message.from_user.id, message.from_user.first_name)
    )
    conn.commit()

    text = (
        "<b><u>–ü—Ä–∏–≤–µ—Ç! üëã</u></b>\n"
        "<b>–≠—Ç–æ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–∑\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≥—Ä—É–ø–ø—ã\n"
        "–î–ª—è —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É \"üîÑ –°–º–µ–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç\"</b>"
    )

    await message.answer(text, parse_mode="HTML", reply_markup=get_main_menu(message.from_user.id))


@dp.message(lambda m: m.text == "–î–æ–±–∞–≤–∏—Ç—å –î–ó")
async def add_dz_start(message: Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ–±–∞–≤–ª—è—Ç—å –¥–∑.")
        return

    keyboard_rows = []
    row = []
    for i, subj in enumerate(subjects, start=1):
        row.append(KeyboardButton(text=subj))
        if i % 2 == 0:
            keyboard_rows.append(row)
            row = []
    if row:
        keyboard_rows.append(row)

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    keyboard_rows.append([KeyboardButton(text="–û—Ç–º–µ–Ω–∞")])

    keyboard = ReplyKeyboardMarkup(keyboard=keyboard_rows, resize_keyboard=True)
    await state.set_state(DzStates.choosing_subject)
    await message.answer("üìö –í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=keyboard)


@dp.message(DzStates.choosing_subject)
async def add_dz_subject(message: Message, state: FSMContext):
    if message.text.strip() == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –î–ó –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu(message.from_user.id))
        return

    subject = message.text.strip()

    cursor.execute("PRAGMA table_info(Dz_Table)")
    valid_subjects = [col[1] for col in cursor.fetchall() if col[1] != "id"]
    if subject not in valid_subjects:
        await message.answer("‚ö† –¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(subject=subject)
    await state.set_state(DzStates.writing_homework)
    await message.answer(
        f"‚úè –ó–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –î–ó –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É: <b>{subject}</b>",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )


@dp.message(DzStates.writing_homework)
async def add_dz_save(message: Message, state: FSMContext):
    hw_text = message.text.strip()
    data = await state.get_data()
    subject = data.get("subject")

    cursor.execute(f'UPDATE Dz_Table SET "{subject}" = ? WHERE id = 1', (hw_text,))

    today = datetime.datetime.today()
    date_str = today.strftime("%A, %d %B")
    date_str = date_str[0].upper() + date_str[1:]
    cursor.execute(f'UPDATE Dz_Table SET "{subject}_date" = ? WHERE id = 1', (date_str,))

    conn.commit()

    await message.answer(
        f"‚úÖ –î–ó –ø–æ <b>{subject}</b> –æ–±–Ω–æ–≤–ª–µ–Ω–æ:\n<b>{hw_text}</b> [{date_str}]",
        parse_mode="HTML",
        reply_markup=get_main_menu(message.from_user.id)
    )
    await state.clear()


@dp.message()
async def handle_buttons(message: Message):
    user_id = message.from_user.id
    text = message.text

    # –î–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    if text == "üìÖ –î–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":
        current_day = datetime.datetime.today().weekday()
        dz = get_homework_for_day(user_id, current_day)
        await message.answer(dz, parse_mode="HTML", reply_markup=get_main_menu(user_id))

    # –î–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    elif text == "üìÖ –î–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞":
        current_day = datetime.datetime.today().weekday()
        next_day = 0 if current_day >= 4 else current_day + 1
        dz = get_homework_for_day(user_id, next_day)
        await message.answer(dz, parse_mode="HTML", reply_markup=get_main_menu(user_id))

    # –°–º–µ–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç
    elif text == "üîÑ –°–º–µ–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç":
        await message.answer("<b>–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:</b>", parse_mode="HTML")

        variant1 = ["–ó–∏–∑–µ–≤—Å–∫–∏–π –ü—ë—Ç—Ä", "–ö–∞—Ä–∏–º–æ–≤ –ê—Ä—Ç—É—Ä", "–°—Ç–∞—Ä–æ—Å—Ç–∏–Ω –ú–∞—Ç–≤–µ–π", "–ß–µ—Ä–Ω–æ–≤ –°—Ç–µ–ø–∞–Ω", "–ò —Ç.–¥."]
        variant2 = ["–õ–∞–∑–∞—Ä–µ–≤ –î–∞–Ω–∏–ª–∞", "–ê–Ω–∞–Ω—å–µ–≤ –ì—Ä–∏–≥–æ—Ä–∏–π", "–ì–∞—Ä–∏–ø–æ–≤ –†—É—Å–ª–∞–Ω", "–ì–ª–æ—Ç–æ–≤ –í—Å–µ–≤–æ–ª–æ–¥", "–ò —Ç.–¥."]

        max_len = max(max(len(name) for name in variant1), max(len(name) for name in variant2)) + 4
        lines = []
        for i in range(max(len(variant1), len(variant2))):
            name1 = variant1[i] if i < len(variant1) else ""
            name2 = variant2[i] if i < len(variant2) else ""
            lines.append(f"{name1.ljust(max_len)}{name2}")

        text_variants = "<pre>–í–∞—Ä–∏–∞–Ω—Ç 1:".ljust(max_len) + "–í–∞—Ä–∏–∞–Ω—Ç 2:\n"
        text_variants += "\n".join(lines)
        text_variants += "</pre>"

        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="1"), KeyboardButton(text="2")]],
            resize_keyboard=True
        )

        await message.answer(text_variants, parse_mode="HTML", reply_markup=keyboard)

    # –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    elif text == "üìñ –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        full_schedule = get_full_schedule(user_id)
        await message.answer(full_schedule, parse_mode="HTML", reply_markup=get_main_menu(user_id))

    # –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞
    elif text in ["1", "2"]:
        cursor.execute("UPDATE UserInfo SET user_option = ? WHERE user_id = ?", (int(text), user_id))
        conn.commit()
        await message.answer(f"–¢—ã –≤—ã–±—Ä–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç {text} ‚úÖ", reply_markup=get_main_menu(user_id))

    else:
        await message.answer("‚ùì –ù–µ –ø–æ–Ω—è–ª. –í—ã–±–∏—Ä–∞–π —á–µ—Ä–µ–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=get_main_menu(user_id))


async def main() -> None:
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
