import asyncio
import logging
import datetime
import httpx
import ssl as _ssl

from aiogram import Bot, Dispatcher, types, html
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.types import Update
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from os import getenv
import asyncpg
from fastapi import FastAPI, Request

# -------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# -------------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = getenv("BOT_TOKEN")
DATABASE_URL = getenv("DATABASE_URL")

def _normalize_base_url(u: str) -> str:
    return u[:-1] if u and u.endswith("/") else u

BASE_URL = getenv("BASE_URL") or getenv("RENDER_EXTERNAL_URL")
BASE_URL = _normalize_base_url(BASE_URL)

WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{BASE_URL}{WEBHOOK_PATH}"

if not TOKEN:
    logging.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN")
    raise SystemExit(1)

if not DATABASE_URL:
    logging.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω DATABASE_URL")
    raise SystemExit(1)

# –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ Render –Ω–µ –≤—ã—Å—Ç–∞–≤–∏–ª RENDER_EXTERNAL_URL (—Ä–µ–¥–∫–æ, –Ω–æ –≤–¥—Ä—É–≥ –ª–æ–∫–∞–ª—å–Ω–æ),
# —Ç–æ–≥–¥–∞ –ø—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å BASE_URL –≤—Ä—É—á–Ω—É—é.
if not BASE_URL:
    logging.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ BASE_URL, –Ω–∏ RENDER_EXTERNAL_URL. –£–∫–∞–∂–∏ BASE_URL –≤—Ä—É—á–Ω—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä https://<your-service>.onrender.com")
    raise SystemExit(1)

# -------------------------
# Bot / Dispatcher / Storage
# -------------------------
bot = None                # —Å–æ–∑–¥–∞–¥–∏–º –≤ startup
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

pool = None  # –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ init_db

# -------------------------
# FSM
# -------------------------
class DzStates(StatesGroup):
    choosing_subject = State()
    writing_homework = State()

ADMINS = [1920672301, 5251769398]

app = FastAPI()

# -------------------------
# –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
# -------------------------
subjects = [
    "–ê–ª–≥–µ–±—Ä–∞", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–ò—Å—Ç–æ—Ä–∏—è",
    "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–§–∏–∑–∏–∫–∞", "–°–ø–µ—Ü–∫—É—Ä—Å –ø–æ —Ñ–∏–∑–∏–∫–µ",
    "–ë–∏–æ–ª–æ–≥–∏—è", "–•–∏–º–∏—è", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–û–ë–ó–†",
    "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞", "–†–∞–∑–≥–æ–≤–æ—Ä –æ –≤–∞–∂–Ω–æ–º", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
    "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–í–∏–°", "–ë–ü–õ–ê"
]

DZ_VAR1 = [
    ["-", "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞", "–•–∏–º–∏—è", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–†–∞–∑–≥–æ–≤–æ—Ä –æ –≤–∞–∂–Ω–æ–º"],
    ["–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–û–ë–ó–†", "–ê–ª–≥–µ–±—Ä–∞", "–ê–ª–≥–µ–±—Ä–∞", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞"],
    ["–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ò—Å—Ç–æ—Ä–∏—è", "–ò—Å—Ç–æ—Ä–∏—è", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞"],
    ["–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–í–∏–°", "–ë–∏–æ–ª–æ–≥–∏—è", "–ë–ü–õ–ê"],
    ["–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ê–ª–≥–µ–±—Ä–∞", "–ê–ª–≥–µ–±—Ä–∞", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–°–ø–µ—Ü–∫—É—Ä—Å –ø–æ —Ñ–∏–∑–∏–∫–µ", "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ"]
]

DZ_VAR2 = [
    ["-", "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞", "–•–∏–º–∏—è", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–§–∏–∑–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–†–∞–∑–≥–æ–≤–æ—Ä –æ –≤–∞–∂–Ω–æ–º"],
    ["–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–û–ë–ó–†", "–ê–ª–≥–µ–±—Ä–∞", "–ê–ª–≥–µ–±—Ä–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞"],
    ["-", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–ò—Å—Ç–æ—Ä–∏—è", "–ò—Å—Ç–æ—Ä–∏—è", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"],
    ["–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–í–∏–°", "–ë–∏–æ–ª–æ–≥–∏—è", "–ë–ü–õ–ê"],
    ["–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ê–ª–≥–µ–±—Ä–∞", "–ê–ª–≥–µ–±—Ä–∞", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–°–ø–µ—Ü–∫—É—Ä—Å –ø–æ —Ñ–∏–∑–∏–∫–µ", "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ"]
]

# -------------------------
# –ú–µ–Ω—é
# -------------------------
def get_main_menu(user_id: int) -> ReplyKeyboardMarkup:
    buttons = [
        [KeyboardButton(text="üìÖ –î–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")],
        [KeyboardButton(text="üìÖ –î–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")],
        [KeyboardButton(text="üìñ –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –≥—Ä—É–ø–ø—ã")]
    ]
    if user_id in ADMINS:
        buttons.append([KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –î–ó")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# -------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
# -------------------------
async def init_db():
    global pool
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º DSN –¥–ª—è asyncpg
    dsn = DATABASE_URL.replace("postgres://", "postgresql://")

    # 1) –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
    verified_ctx = _ssl.create_default_context()
    try:
        pool = await asyncpg.create_pool(dsn, ssl=verified_ctx)
    except _ssl.SSLCertVerificationError as e:
        logger.warning("SSL verification failed (self-signed cert). Falling back to UNVERIFIED SSL context. "
                       "–≠—Ç–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ –≤ –ø—Ä–æ–¥–µ ‚Äî –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏–ª–∏ sslmode=require.")
        # 2) –§–æ–ª–ª–±—ç–∫: –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞/host
        unverified_ctx = _ssl.create_default_context()
        unverified_ctx.check_hostname = False
        unverified_ctx.verify_mode = _ssl.CERT_NONE
        pool = await asyncpg.create_pool(dsn, ssl=unverified_ctx)

    async with pool.acquire() as conn:
        await conn.execute("""
        CREATE TABLE IF NOT EXISTS UserInfo (
            id SERIAL PRIMARY KEY,
            user_id BIGINT UNIQUE,
            user_name TEXT,
            user_option INT
        )
        """)
        cols = ', '.join([f'"{subj}" TEXT, "{subj}_date" TEXT' for subj in subjects])
        await conn.execute(f"""
        CREATE TABLE IF NOT EXISTS Dz_Table (
            id SERIAL PRIMARY KEY,
            {cols}
        )
        """)
        exists = await conn.fetchval("SELECT COUNT(*) FROM Dz_Table")
        if exists == 0:
            cols_names = ', '.join([f'"{subj}"' for subj in subjects])
            values = ', '.join(["'–ù–∏—á–µ–≥–æ'" for _ in subjects])
            await conn.execute(f'INSERT INTO Dz_Table ({cols_names}) VALUES ({values})')

async def init_db_with_retry(retries: int = 5, delay: int = 3):
    last_err = None
    for attempt in range(1, retries + 1):
        try:
            logger.info(f"DB init attempt {attempt}/{retries} ...")
            await init_db()
            logger.info("DB init OK")
            return
        except Exception as e:
            last_err = e
            logger.error(f"DB init failed: {e!r}. Retry in {delay}s")
            await asyncio.sleep(delay)
    # –µ—Å–ª–∏ —Ç–∞–∫ –∏ –Ω–µ –ø–æ–¥–Ω—è–ª–∏—Å—å ‚Äî –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã —É–ø–∞—Å—Ç—å —Å –ø–æ–Ω—è—Ç–Ω–æ–π –ø—Ä–∏—á–∏–Ω–æ–π
    raise last_err

# -------------------------
# Health-check (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ 404 –ø—Ä–∏ keep-alive)
# -------------------------
@app.get("/")
async def root():
    return {"ok": True}

# -------------------------
# Keep-alive
# -------------------------
KEEP_ALIVE_URL = BASE_URL  # ping root health-check

async def keep_awake():
    while True:
        try:
            async with httpx.AsyncClient() as client:
                await client.get(KEEP_ALIVE_URL, timeout=10)
            logger.info("Keep-alive ping –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ keep-alive: {e}")
        await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç

# -------------------------
# Webhook endpoint
# -------------------------
@app.post("/webhook")
async def telegram_webhook(request: Request):
    if bot is None:
        logger.error("Bot not initialized yet, received update")
        return {"ok": False}
    try:
        raw = await request.json()
        update = Update.model_validate(raw)  # —Å—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        asyncio.create_task(dp.feed_webhook_update(bot, update))
        logger.info("Update OK: %s", raw.get("update_id"))
        return {"ok": True}
    except Exception as e:
        # –ß—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –æ—à–∏–±–∫–∏ –≤–æ–æ–±—â–µ
        logger.exception(f"Webhook error: {e}")
        return {"ok": False}

# -------------------------
# Startup / Shutdown
# -------------------------
@app.on_event("startup")
async def on_startup():
    global bot
    logger.info("Starting up: init DB, bot, webhook, keep-alive")
    # init db
    await init_db_with_retry()
    # create bot (so its session binds to current loop)
    bot = Bot(token=TOKEN)
    # set webhook
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook set to {WEBHOOK_URL}")
    # start keep-alive background task
    asyncio.create_task(keep_awake())

@app.on_event("shutdown")
async def on_shutdown():
    logger.info("Shutting down: closing resources")
    if pool:
        await pool.close()
    if bot:
        try:
            await bot.delete_webhook()
        except Exception as e:
            logger.error(f"Error deleting webhook: {e}")
        try:
            await bot.session.close()
        except Exception:
            try:
                await bot.close()
            except Exception:
                pass
    try:
        await storage.close()
    except Exception:
        pass

@dp.message(CommandStart())
async def command_start_handler(message: Message):
    if pool is None:
        raise RuntimeError("–ü—É–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—â—ë –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    async with pool.acquire() as conn:
        await conn.execute(
            "INSERT INTO UserInfo (user_id, user_name) VALUES ($1, $2) "
            "ON CONFLICT (user_id) DO NOTHING",
            message.from_user.id, message.from_user.first_name
        )

    text = (
        "<b><u>–ü—Ä–∏–≤–µ—Ç! üëã</u></b>\n"
        "<b>–≠—Ç–æ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–∑.\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≥—Ä—É–ø–ø—ã.\n"
        "–î–ª—è —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É \" –°–º–µ–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –≥—Ä—É–ø–ø—ã\"</b>"
    )

    await message.answer(text, parse_mode="HTML", reply_markup=get_main_menu(message.from_user.id))

async def get_user_option(user_id: int):
    if pool is None:
        raise RuntimeError("–ü—É–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—â—ë –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    async with pool.acquire() as conn:
        row = await conn.fetchrow(
            "SELECT user_option FROM UserInfo WHERE user_id=$1", user_id
        )
        return row["user_option"] if row else None

async def get_homework_for_day(user_id: int, day_index: int):
    if pool is None:
        raise RuntimeError("–ü—É–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—â—ë –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    user_option = await get_user_option(user_id)
    if not user_option:
        return "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É 'üîÑ –°–º–µ–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç'"
    
    DZ = DZ_VAR1 if user_option == 1 else DZ_VAR2
    async with pool.acquire() as conn:
        row = await conn.fetchrow("SELECT * FROM Dz_Table WHERE id=1")
    
    result = f"<b><u>{['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫','–í—Ç–æ—Ä–Ω–∏–∫','–°—Ä–µ–¥–∞','–ß–µ—Ç–≤–µ—Ä–≥','–ü—è—Ç–Ω–∏—Ü–∞'][day_index]} ‚Äî –í–∞—Ä–∏–∞–Ω—Ç {user_option}</u></b>\n\n"
    for i, subj in enumerate(DZ[day_index], start=1):
        if subj == "-":
            result += f"<b>{i}. ‚ùå –ù–µ—Ç —É—Ä–æ–∫–∞</b>\n"
        else:
            hw = row[subj]
            date = row[f"{subj}_date"]
            result += f"<b>{i}. {html.quote(subj)} ‚Äî {html.quote(hw)}</b>"
            if date:
                result += f" [{date}]"
            result += "\n"
    return result


async def get_full_schedule(user_id: int):
    if pool is None:
        raise RuntimeError("–ü—É–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—â—ë –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    user_option = await get_user_option(user_id)
    if not user_option:
        return "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É 'üîÑ –°–º–µ–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç'"
    
    DZ = DZ_VAR1 if user_option == 1 else DZ_VAR2
    async with pool.acquire() as conn:
        row = await conn.fetchrow("SELECT * FROM Dz_Table WHERE id=1")
    
    result = ""
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞"]
    for i, day in enumerate(days):
        subjects_day = DZ[i]
        result += f"<b><u>{day} ‚Äî –í–∞—Ä–∏–∞–Ω—Ç {user_option}</u></b>\n\n"
        for j, subj in enumerate(subjects_day, start=1):
            if subj == "-":
                result += f"<b>{j}. ‚ùå –ù–µ—Ç —É—Ä–æ–∫–∞</b>\n"
            else:
                hw = row[subj]
                date = row[f"{subj}_date"]
                result += f"<b>{j}. {html.quote(subj)} ‚Äî {html.quote(hw)}</b>"
                if date:
                    result += f" [{date}]"
                result += "\n"
        result += "\n"
    return result


# -------------------------
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –î–ó
# -------------------------
@dp.message(lambda m: m.text == "–î–æ–±–∞–≤–∏—Ç—å –î–ó")
async def add_dz_start(message: Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ–±–∞–≤–ª—è—Ç—å –¥–∑.")
        return

    keyboard_rows = []
    row = []
    for i, subj in enumerate(subjects, start=1):
        row.append(KeyboardButton(text=subj))
        if i % 2 == 0:
            keyboard_rows.append(row)
            row = []
    if row:
        keyboard_rows.append(row)
    keyboard_rows.append([KeyboardButton(text="–û—Ç–º–µ–Ω–∞")])
    keyboard = ReplyKeyboardMarkup(keyboard=keyboard_rows, resize_keyboard=True)
    await state.set_state(DzStates.choosing_subject)
    await message.answer("üìö –í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=keyboard)

@dp.message(DzStates.choosing_subject)
async def add_dz_subject(message: Message, state: FSMContext):
    if message.text.strip() == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –î–ó –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu(message.from_user.id))
        return
    subject = message.text.strip()
    if subject not in subjects:
        await message.answer("‚ö† –¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(subject=subject)
    await state.set_state(DzStates.writing_homework)
    await message.answer(f"‚úè –ó–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –î–ó –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É: <b>{subject}</b>",
                         parse_mode="HTML", reply_markup=ReplyKeyboardRemove())

@dp.message(DzStates.writing_homework)
async def add_dz_save(message: Message, state: FSMContext):
    hw_text = message.text.strip()
    data = await state.get_data()
    subject = data.get("subject")
    today = datetime.datetime.today()
    RUS_DAYS = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    RUS_MONTHS = ["–Ø–Ω–≤–∞—Ä—è","–§–µ–≤—Ä–∞–ª—è","–ú–∞—Ä—Ç–∞","–ê–ø—Ä–µ–ª—è","–ú–∞—è","–ò—é–Ω—è",
                  "–ò—é–ª—è","–ê–≤–≥—É—Å—Ç–∞","–°–µ–Ω—Ç—è–±—Ä—è","–û–∫—Ç—è–±—Ä—è","–ù–æ—è–±—Ä—è","–î–µ–∫–∞–±—Ä—è"]
    date_str = f"{RUS_DAYS[today.weekday()]}, {today.day} {RUS_MONTHS[today.month-1]}"
    if pool is None:
        raise RuntimeError("–ü—É–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—â—ë –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    async with pool.acquire() as conn:
        await conn.execute(f'UPDATE Dz_Table SET "{subject}"=$1, "{subject}_date"=$2 WHERE id=1',
                       hw_text, date_str)

    await message.answer(f"‚úÖ –î–ó –ø–æ <b>{subject}</b> –æ–±–Ω–æ–≤–ª–µ–Ω–æ:\n<b>{hw_text}</b> [{date_str}]",
                         parse_mode="HTML", reply_markup=get_main_menu(message.from_user.id))
    await state.clear()

# -------------------------
# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
# -------------------------
@dp.message()
async def handle_buttons(message: Message):
    user_id = message.from_user.id
    text = message.text

    if text == "üìÖ –î–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":
        current_day = datetime.datetime.today().weekday()
        if current_day > 4: current_day = 0
        dz = await get_homework_for_day(user_id, current_day)
        await message.answer(dz, parse_mode="HTML", reply_markup=get_main_menu(user_id))

    elif text == "üìÖ –î–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞":
        current_day = datetime.datetime.today().weekday()
        next_day = 0 if current_day >= 4 else current_day + 1
        dz = await get_homework_for_day(user_id, next_day)
        await message.answer(dz, parse_mode="HTML", reply_markup=get_main_menu(user_id))

    elif text == "üìñ –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        full_schedule = await get_full_schedule(user_id)
        await message.answer(full_schedule, parse_mode="HTML", reply_markup=get_main_menu(user_id))

    elif text == "üîÑ –°–º–µ–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –≥—Ä—É–ø–ø—ã":
        await message.answer("<b>–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≥—Ä—É–ø–ø—ã:</b>", parse_mode="HTML")

        variant1 = ["–ó–∏–∑–µ–≤—Å–∫–∏–π –ü—ë—Ç—Ä", "–ö–∞—Ä–∏–º–æ–≤ –ê—Ä—Ç—É—Ä", "–°—Ç–∞—Ä–æ—Å—Ç–∏–Ω –ú–∞—Ç–≤–µ–π", "–ß–µ—Ä–Ω–æ–≤ –°—Ç–µ–ø–∞–Ω", "–ò —Ç.–¥."]
        variant2 = ["–õ–∞–∑–∞—Ä–µ–≤ –î–∞–Ω–∏–ª–∞", "–ê–Ω–∞–Ω—å–µ–≤ –ì—Ä–∏–≥–æ—Ä–∏–π", "–ì–∞—Ä–∏–ø–æ–≤ –†—É—Å–ª–∞–Ω", "–ì–ª–æ—Ç–æ–≤ –í—Å–µ–≤–æ–ª–æ–¥", "–ò —Ç.–¥."]

        max_len = max(max(len(name) for name in variant1), max(len(name) for name in variant2)) + 4
        lines = []

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        header = f"{'–í–∞—Ä–∏–∞–Ω—Ç 1:'.ljust(max_len)}–í–∞—Ä–∏–∞–Ω—Ç 2:"
        lines.append(header)

        # –°–∞–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        for i in range(max(len(variant1), len(variant2))):
            name1 = variant1[i] if i < len(variant1) else ""
            name2 = variant2[i] if i < len(variant2) else ""
            lines.append(f"{name1.ljust(max_len)}{name2}")

        # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å—ë –≤ <pre>
        text_variants = "<pre>" + "\n".join(lines) + "</pre>"

        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="1"), KeyboardButton(text="2")]],
            resize_keyboard=True
        )

        await message.answer(text_variants, parse_mode="HTML", reply_markup=keyboard)

    elif text in ["1","2"]:
        if pool is None:
            raise RuntimeError("–ü—É–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—â—ë –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        async with pool.acquire() as conn:
            await conn.execute(
                "UPDATE UserInfo SET user_option=$1 WHERE user_id=$2", int(text), user_id
            )
        await message.answer(f"–¢—ã –≤—ã–±—Ä–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç {text} ‚úÖ", reply_markup=get_main_menu(user_id))


    else:
        await message.answer("‚ùì –ù–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=get_main_menu(user_id))